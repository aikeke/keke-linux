TCP总共有11种状态

    1. 客户端独有的：（1）SYN_SENT （2）FIN_WAIT1 （3）FIN_WAIT2 （4）CLOSING （5）TIME_WAIT 。

    2. 服务器独有的：（1）LISTEN （2）SYN_RCVD （3）CLOSE_WAIT （4）LAST_ACK 。

    3. 共有的：（1）CLOSED （2）ESTABLISHED 。

1、LISTEN - 侦听来自远方TCP端口的连接请求； 
看LISTENING状态最主要的是看本机开了哪些端口，这些端口都是哪个程序开的，关闭不必要的端口是保证安全的一个非常重要的方面，
服务端口都对应一个服务(应用程序)停止该服务就关闭了该端口，如果你不幸中了服务端口的木马，木马也开个端口处于LISTENING状态。

2、SYN-SENT -在发送连接请求后等待匹配的连接请求； 
客户端通过应用程序调用connect进行active open.于是客户端tcp发送一个SYN以请求建立一个连接.之后状态置为SYN_SENT.
当请求连接时客户端首先要发送同步信号给要访问的机器，此时状态为SYN_SENT，如果连接成功了就变为ESTABLISHED，正常情况下SYN_SENT状态非常短暂。
如果发现有很多SYN_SENT出现，那一般有这么几种情况，一是你要访问的网站不存在或线路不好，二是用扫描软件扫描一个网段的机器，也会出出现很多SYN_SENT，
另外就是可能中了病毒了，病毒发作时会扫描其它机器，这样会有很多SYN_SENT出现。

3、SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认； 
当服务器收到客户端发送的同步信号时，将标志位ACK和SYN置1发送给客户端，此时服务器端处于SYN_RCVD状态，如果连接成功了就变为ESTABLISHED，
正常情况下SYN_RCVD状态非常短暂。如果发现有很多SYN_RCVD状态，那你的机器有可能被SYN Flood的DoS(拒绝服务攻击)攻击了。
SYN Flood
在进行三次握手时，攻击软件向被攻击的服务器发送SYN连接请求(握手的第一步)，但是这个地址是伪造的，
服务器在收到连接请求时将标志位ACK和SYN置1发送给客户端(握手的第二步)，但是这些客户端的IP地址都是伪造的，
服务器根本找不到客户机，也就是说握手的第三步不可能完成。
这种情况下服务器端一般会重试(再次发送SYN+ACK给客户端)并等待一段时间后丢弃这个未完成的连接，这段时间的长度我们称为SYN Timeout，
一般来说这个时间是分钟的数量级(大约为30秒-2分钟);一个用户出现异常导致服务器的一个线程等待1分钟并不是什么很大的问题，
但如果有一个恶意的攻击者大量模拟这种情况，服务器端将为了维护一个非常大的半连接列表而消耗非常多的资源，
数以万计的半连接，即使是简单的保存并遍历也会消耗非常多的CPU时间和内存，何况还要不断对这个列表中的IP进行SYN+ACK的重试。
此时从正常客户的角度看来，服务器失去响应，这种情况我们称做：服务器端受到了SYN Flood攻击(SYN洪水攻击 )

4、ESTABLISHED- 代表一个打开的连接，数据可以传送给用户； 
ESTABLISHED状态是表示两台机器正在传输数据，观察这个状态最主要的就是看哪个程序正在处于ESTABLISHED状态。
当客户端未主动close的时候就断开连接：即客户端发送的FIN丢失或未发送。
这时候若客户端断开的时候发送了FIN包，则服务端将会处于CLOSE_WAIT状态;
这时候若客户端断开的时候未发送FIN包，则服务端处还是显示ESTABLISHED状态;
结果客户端重新连接服务器。
而新连接上来的客户端(也就是刚才断掉的重新连上来了)在服务端肯定是ESTABLISHED; 如果客户端重复的上演这种情况，
那么服务端将会出现大量的假的ESTABLISHED连接和CLOSE_WAIT连接。
最终结果就是新的其他客户端无法连接上来，但是利用netstat还是能看到一条连接已经建立，并显示ESTABLISHED，但始终无法进入程序代码。

5、FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；
主动关闭(active close)端应用程序调用close，于是其TCP发出FIN请求主动关闭连接，之后进入FIN_WAIT1状态.

6、FIN-WAIT-2 - 从远程TCP等待连接中断请求； 
主动关闭端接到ACK后，就进入了FIN-WAIT-2 .
这就是著名的半关闭的状态了，这是在关闭连接时，客户端和服务器两次握手之后的状态。
在这个状态下，应用程序还有接受数据的能力，但是已经无法发送数据，但是也有一种可能是，客户端一直处于FIN_WAIT_2状态，
而服务器则一直处于WAIT_CLOSE状态，而直到应用层来决定关闭这个状态。

7、CLOSE-WAIT - 等待从本地用户发来的连接中断请求； 
被动关闭(passive close)端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序),并进入CLOSE_WAIT. 

8、CLOSING -等待远程TCP对连接中断的确认； 
这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。
正常情况下，当你发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。
但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却收到了对方的FIN报文。
什么情况下会出现此种情况呢？其实细想一下，也不难得出结论：那就是如果双方几乎在同时close一个SOCKET的话，那么就出现了双方同时发送FIN报文的情况，
也即会出现CLOSING状态，表示双方都正在关闭SOCKET连接。


9、LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认； 
被动关闭端一段时间后，接收到文件结束符的应用程序将调用CLOSE关闭连接。这导致它的TCP也发送一个 FIN,等待对方的ACK.就进入了LAST-ACK . 

10、TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认； 
在主动关闭端接收到FIN后，TCP就发送ACK包，并进入TIME-WAIT状态。
TIME_WAIT等待状态，这个状态又叫做2MSL状态，说的是在TIME_WAIT2发送了最后一个ACK数据报以后，
要进入TIME_WAIT状态，这个状态是防止最后一次握手的数据报没有传送到对方那里而准备的(注意这不是四次握手，这是第四次握手的保险状态)。
这个状态在很大程度上保证了双方都可以正常结束，但是，问题也来了。
由于插口的2MSL状态(插口是IP和端口对的意思，socket)，使得应用程序在2MSL时间内是无法再次使用同一个插口的，
对于客户程序还好一些，但是对于服务程序，例如httpd，它总是要使用同一个端口来进行服务，而在2MSL时间内，启动httpd就会出现错误(插口被使用)。
为了避免这个错误，服务器给出了一个平静时间的概念，这是说在2MSL时间内，虽然可以重新启动服务器，
但是这个服务器还是要平静的等待2MSL时间的过去才能进行下一次连接。

11、CLOSED - 没有任何连接状态；

原文：https://blog.csdn.net/bzfys/article/details/73733917 
