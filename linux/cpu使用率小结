1.Linux并发(任务并行)的实质：Linux 作为一个多任务操作系统，将每个 CPU 的时间划分为很短的时间片，再通过调度器轮流分配给各个任务使用
2./proc/stat 提供的就是系统的 CPU 和任务统计信息； /proc/[pid]/stat展示进程的CPU和任务统计信息
3.cpu指标
user（通常缩写为 us），代表用户态 CPU 时间。注意，它不包括下面的 nice 时间，但包括了 guest时间。
nice（通常缩写为 ni），代表低优先级用户态 CPU时间，就是进程的nice数值在1-19之间时的cpu时间。nice范围-20到19，数值越大，优先级越低。
system（通常缩写为 sys），代表内核态 CPU 时间。
idle（通常缩写为id），代表空闲时间。注意，它不包括等待I/O的时间（iowait）。
iowait（通常缩写为wa），代表等待I/O的cpu时间
irq（通常缩写为hi），代表处理硬中断的cpu时间
softirq（通常缩写为si），软中断
steal（通常缩写为st），代表当系统运行在虚拟机中的时候，被其他虚拟机占用的 CPU 时间。
guest（通常缩写为guest），代表通过虚拟机运行其他操作系统的时间，也就是运行虚拟机的cpu时间。
guest_nice（通常缩写为gnice），代表以低优先级运行虚拟机的时间。

4.cpu使用率=1-空闲时间/总cpu时间
事实上，为了计算 CPU 使用率，性能工具一般都会取间隔一段时间（比如3秒）的两次数值做差后，在计算出这段时间内的平均cpu使用率。

5.性能分析工具给出的都是间隔一段时间的平均 CPU 使用率，所以要注意间隔时间的设置。
比如top默认3秒间隔，ps则是进程的整个生命周期。
top按1切换每个cpu的使用率，默认所有cpu平均值。
top 并没有细分进程的用户态 CPU 和内核态 CPU，可以使用pidstat详细分析每个进程的cpu使用情况

6.当cpu使用过高锁定进程后可以使用perf进一步分析
perf top
它能够实时显示占用 CPU 时钟最多的函数或者指令，因此可以用来查找热点函数
# -g 开启调用关系分析，-p 指定 php-fpm 的进程号 21515
$ perf top -g -p 21515
$ perf top
Samples: 893  of event 'cpu-clock', Event count (approx.): 974525199
Overhead  Shared Object       Symbol
   5.38%  perf                [.] 0x00000000001f78a4
   1.72%  [kernel]            [k] vsnprintf
...
第一列 Overhead ，是该符号的性能事件在所有采样中的比例
第二列 Shared ，是该函数或指令所在的动态共享对象（Dynamic Shared Object），如内核、进程名、动态链接库名、内核模块名等。
第三列 Object ，是动态共享对象的类型。比如 [.]表示用户空间的可执行程序、或者动态链接库，而 [k] 则表示内核空间。
最后一列 Symbol 是符号名，也就是函数名。当函数名未知用十六进制的地址来表示。

9.常用perf record和perf report来后续分析。

